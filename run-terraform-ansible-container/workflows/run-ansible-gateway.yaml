direktiv_api: workflow/v1

description: Run a Docker Hub Ansible container without any changes

functions:
  # This is a simple Ansible container from hub.docker.com
  - id: ansible
    image: alpine:latest
    type: knative-workflow
    size: large
    cmd: /usr/share/direktiv/direktiv-cmd
 
states:
  # 
  # The Ansible playbook is received from the API gateway as a base64 encoded object in the "body" of the request coming in. 
  # Store in the incoming playbook as a variable to use in subsequent states using the "setter" Direktiv state.
  #
  - id: store-config
    type: setter
    variables:
    - key: provision-aws.yaml               # <--- Name of the variable
      scope: instance                       # <--- Store it only for the workflow instance
      mimeType: text/plain                  # <--- Store it as plain text
      value: 'jq( .body.data | @base64d )'  # <--- Convert the base64 body (playbook) into text
    transition: run-ansible

  #
  # Let's only run a single state which executes the ansible commands. The Ansible playbook is pulled from the variable created
  # in the previous state.
  #
  # Note: the Ansible container is built on-demand as there is no existing official Ansible container
  #
  - id: run-ansible 
    type: action
    action:
      secrets: ["AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY"]
      function: ansible
      files:                           # <--- Create a file on the container
      - key: provision-aws.yaml        # <--- Name of the variable
        scope: instance                # <--- Context of the variable (instance)
        as: provision-aws.yaml         # <--- Name of the file on the container file system
      input:
        data:
          commands:
          - command: apk add --no-cache python3 py3-pip
            suppress_output: true
            suppress_command: true
          - command: pip3 install boto3 --break-system-packages
            suppress_output: true
            suppress_command: true
          - command: pip3 install ansible --break-system-packages
            suppress_output: true
            suppress_command: true
          - command: ansible-galaxy collection install amazon.aws
            suppress_output: true
            suppress_command: true
          - command: ansible-playbook provision-aws.yaml -v --extra-vars "show_custom_stats=true stdout_callback=ansible.posix.json"
            envs: 
            - name: AWS_ACCESS_KEY_ID
              value: jq(.secrets.AWS_ACCESS_KEY_ID)
            - name: AWS_SECRET_ACCESS_KEY
              value: jq(.secrets.AWS_SECRET_ACCESS_KEY)
          # You can also pass the environmental variables as commmand-line arguments
          # - command: ansible-playbook provision-aws.yaml -vvv --extra-vars "aws_access_key=jq(.secrets.AWS_ACCESS_KEY_ID) aws_secret_key=jq(.secrets.AWS_SECRET_ACCESS_KEY) show_custom_stats=true stdout_callback=ansible.posix.json"
    transform: 'jq( { result: .return[4]."Output" } )'