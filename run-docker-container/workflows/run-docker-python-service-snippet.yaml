direktiv_api: workflow/v1

description: Run a Docker Hub Python container without any changes

functions:
  # This is a simple Python container from hub.docker.com: docker pull python:3.9.18-slim-bookworm
  - id: python
    service: /run-docker-container/services/python.yaml
    type: knative-namespace

  # This is a simple http-request container which executes HTTP(S) API calls
  - id: http-request
    image: gcr.io/direktiv/functions/http-request:1.0
    type: knative-workflow
 
states:
  # Unpack the username header from the initial request 
  # - id: decode-basic-auth
  #   type: noop
  #   log: 'jq("Decoding username and password for: " + .headers."Authorization"[0])'
  #   transform: 'jq( . + (.headers."Authorization"[0] | split(" ") | .[1] | @base64d | split(":") | if .[1] != "" then { "username": .[0], "password": .[1] } else { "username": .[0], "password": "Direktiv" } end  ) )'
  #   transition: authenticate-keycloak

  # Get the JWT Token from Keycloak using the hux-username header and the static password (Unity Client doesn't have passwords)
  - id: authenticate-keycloak
    log: 'jq("Received authentication request for : " + .username)'
    type: action
    action:
      function: http-request
      secrets: ["KEYCLOAK_CLIENT_SECRET", "OPENID_CLIENT_ID"]
      input: 
        debug: False
        method: POST
        url: 'https://direktiv.tdi.archtis.com/auth/realms/bae-tdi/protocol/openid-connect/token'
        headers:
          content-type: "application/x-www-form-urlencoded"
        content:
          kind: string
          value: "&username=jq(.username)&password=jq(.password)&client_id=jq(.secrets.OPENID_CLIENT_ID)&client_secret=jq(.secrets.KEYCLOAK_CLIENT_SECRET)&grant_type=password"
    transform: 'jq( . + { access_token: .return[0].result.access_token } | del(.return) )'
    transition: split-token

  - id: split-token
    type: noop
    transition: decode-tokens
    transform: 'jq(.access_token as $ststoken | .access_token |= split(".") | {header: .access_token[0], payload: .access_token[1], signature: .access_token[2], access_token: $ststoken})'

  - id: decode-tokens
    type: action
    action:
      function: python
      files: 
      - key: /run-docker-container/code/decodePayload.py
        scope: file
        as: decodePayload.py
      input: 
        data:
          commands:
          - command: python3 decodePayload.py --header jq(.header) --payload jq(.payload)
        commands:
        - command: python3 decodePayload.py 
    #transform: 'jq( . + { header_payload: .return.python[1].result, payload_enc_pad: .return.python[2].result } | del (.return)  )'
    catch:
    - error: "*"
      transition: exception-catch-handle

  - id: exception-catch-handle
    type: noop
    log: 'jq( {error: .error.msg, access_token: .access_token} )'
    transform: 'jq( {error: .error.msg, access_token: .access_token} )'

  # - id: store-variable
  #   type: setter
  #   variables:
  #   - key: version
  #     scope: workflow
  #     mimeType: text/plain
  #     value: 'jq(.output)'