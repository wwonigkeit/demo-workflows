direktiv_api: workflow/v1

description: Run kubectl command with a kubeconfig file stored as a variable

functions:
  # This is a simple Ansible container from hub.docker.com
  - id: kubectl
    image: alpine
    type: knative-workflow
    size: small
    cmd: /usr/share/direktiv/direktiv-cmd
 
states:
  #
  # We're going to run a single workflow state that installs the kubectl command on alpine Linux and then
  # runs all the commands we need. You can always build this as a service as well
  #
  - id: run-kubectl 
    type: action
    action:
      secrets: ["KUBECONFIG"]                                                     # <--- Stored the config file from K3s as a secret
      function: kubectl
      files:                                                                      # <--- Create a file on the container
      #
      # This section can create the kubeconfig / config file based on a file in the GitHUb repository - created when you use the GitHub
      # sync capability
      #
      - key: /run-kubectl-workflows/data/kubectl.yaml                             # <--- Location of the file from the GitHUb repository
        scope: file                                                               # <--- Context of the variable (file in repository)
        as: kubeconfig-file                                                       # <--- Name of the file on the container file system
      #
      # OR ... you can use an internally stored variable for this purpose
      #
      - key: KUBECONFIG                                                           # <--- Name of the variable
        scope: namespace                                                          # <--- Context of the variable (file in repository)
        as: kubeconfig-variable                                                   # <--- Name of the file on the container file system
      #
      # Pull script from variable
      #
      - key: kubectl_script.sh                                                    # <--- Name of the variable
        scope: namespace                                                          # <--- Context of the variable (file in repository)
        as: kubectl_script_variable.sh                                                     # <--- Name of the file on the container file system
      #
      # OR ...  you can pull script from GitHUb repository
      #
      - key: /run-kubectl-workflows/data/kubectl_script.sh                        # <--- Location of the file from the GitHUb repository
        scope: file                                                               # <--- Context of the variable (file in repository)
        as: kubectl_script_file.sh                                                # <--- Name of the file on the container file system
      input:
        files:
        - name: kubectl_script_ondemand.sh
          content: | # (or is this data?)
              #!/bin/bash

              for i in {1..10}; do
                  VERSION=$(kubectl get nodes --kubeconfig="$1" | grep -i ip | awk '{print $5}')
                  echo "$i : $VERSION"
              done
          permission: 0755
        data:
          commands:
          - command: apk --no-cache add curl
          - command: curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
          - command: chmod +x ./kubectl
          - command: mv ./kubectl /usr/local/bin
          #- command: kubectl get nodes --kubeconfig=kubeconfig-file --output json
          #- command: kubectl get pods --kubeconfig=kubeconfig-variable --output json
          #- command: /bin/bash kubectl_script_variable.sh kubeconfig-file
          #- command: /bin/bash kubectl_script_file.sh kubeconfig-variable
          - command: /bin/bash kubectl_script_ondemand.sh kubeconfig-variable
    # transform: 'jq( { result: .return[4]."Output" } )'